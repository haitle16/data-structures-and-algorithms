/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedList;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;


public class LibraryTest {
    LinkedList list;
    @Before
    public void setUp(){
        list = new LinkedList();
        list.append("1");
        list.append("3");
        list.append("5");
    }

    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }
    @Test public void emptyLLtest() {
        LinkedList list = new LinkedList();
        String expected = "The list is empty!";
        assertEquals(expected, list.toString());
    }

    @Test public void insertTest() {
        LinkedList list = new LinkedList();
        list.insert("1");
        list.insert("3");
        list.insert("5");
        String expected = "5";
        assertEquals(expected, list.head.value);
    }

    @Test public void llHeadTest() {
        LinkedList list = new LinkedList();
        list.append("a");
        String expected = "a";
        assertEquals(expected, list.head.value);
    }

    @Test public void includesMethodTest() {
        list.append("2");
        list.append("4");
        list.append("6");
        list.append("7");
        assertEquals(true, list.includes("1"));
        assertEquals(true, list.includes("3"));
        assertEquals(true, list.includes("5"));
        assertEquals(true, list.includes("7"));
        assertEquals(false, list.includes("8"));
    }

    @Test public void appendTest() {
        String expected = "{ 1 } -> { 3 } -> { 5 } -> NULL";
        assertEquals(expected, list.toString());
    }

    @Test public void insertBeforeTest() {
        String expected = "{ 1 } -> { 2 } -> { 3 } -> { 5 } -> NULL";
        list.insertBefore("3", "2");
        assertEquals(expected, list.toString());
    }

    @Test public void insertAfterTest() {
        String expected = "{ 1 } -> { 3 } -> { 2 } -> { 5 } -> NULL";
        list.insertAfter("3", "2");
        assertEquals(expected, list.toString());
    }

    @Test
    public void kthFromEndTest(){
        list.append("2");
        list.append("4");
        System.out.println(list);
        assertEquals("Testing k and length are the same ","1", list.kthFromEnd(4));
        assertEquals("Testing negative value ","Exception!", list.kthFromEnd(-2));
        assertEquals("Happy Paths ","5", list.kthFromEnd(2));
    }

    @Test (expected = NullPointerException.class)
    public void kthFromEnd_ErrorTest(){
        list.append("2");
        list.append("4");
        System.out.println(list.kthFromEnd(5));
    }

    @Test
    public void kthFromEndTest_1size(){
        LinkedList list1 = new LinkedList();
        list1.append("5");
        assertEquals("Test list with size 1","5", list1.kthFromEnd(0));
    }

    @Test
    public void mergeListsTest(){
        LinkedList listTwo = new LinkedList();
        listTwo.append("2");
        listTwo.append("9");
        listTwo.append("4");
        System.out.println(list);
        System.out.println(listTwo);
        LinkedList output = LinkedList.mergeLists(list,listTwo);
        System.out.println(output);
    }
}
